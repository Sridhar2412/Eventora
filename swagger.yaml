openapi: 3.0.0
info:
  title: User & Event API
  description: API for managing users and events
  version: 1.0.0
servers:
  - url: http://192.168.0.103:3000
    # - url: http://192.168.68.145:3000
    description: Local server

components:
  schemas:
    # User Schema
    User:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        fullname:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        mobile:
          type: string
          example: '1234567890'
        password:
          type: string
          example: 'password123'

    # Request Body for Creating User
    CreateUserRequest:
      type: object
      properties:
        fullname:
          type: string
          example: 'John Doe'
        email:
          type: string
          example: 'john.doe@example.com'
        mobile:
          type: string
          example: '1234567890'
        password:
          type: string
          example: 'password123'

    # Request Body for Login
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: rohan@yopmail.com
        password:
          type: string
          example: 'admin@123'

    # Error Response Schema
    Error:
      type: object
      properties:
        status:
          type: string
          example: ERROR
        code:
          type: integer
          example: 400
        error:
          type: object
          properties:
            message:
              type: string
              example: 'Error message'

    # Success Response for User
    UserResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          $ref: '#/components/schemas/User'

    # Success Response for List of Users
    UsersListResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'

    # Login Response Model
    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: 'your-access-token-here'

    EventsListResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          type: array
          items:
            $ref: '#/components/schemas/Event'

    # Event Schema
    Event:
      type: object
      properties:
        event_id:
          type: integer
          example: 1
        event_name:
          type: string
          maxLength: 255
          example: 'Tech Conference 2025'
        event_date:
          type: string
          format: date
          example: '2025-05-15'
        city:
          type: string
          maxLength: 100
          example: 'San Francisco'
        description:
          type: string
          example: 'An exciting tech conference for developers'
        category:
          type: string
          maxLength: 100
          example: 'Technology'
        latitude:
          type: number
          format: float
          example: 37.7749
        longitude:
          type: number
          format: float
          example: -122.4194

    EventResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          $ref: '#/components/schemas/Event'

    # Request Body for Creating Event
    CreateEventRequest:
      type: object
      properties:
        event_name:
          type: string
          maxLength: 255
          example: 'Tech Conference 2025'
        event_date:
          type: string
          format: date
          example: '2025-05-15'
        city:
          type: string
          maxLength: 100
          example: 'San Francisco'
        description:
          type: string
          example: 'An exciting tech conference for developers'
        category:
          type: string
          maxLength: 100
          example: 'Technology'
        latitude:
          type: number
          format: float
          example: 37.7749
        longitude:
          type: number
          format: float
          example: -122.4194

    EventListByCategoryRequest:
      type: object
      properties:
        category:
          type: string
          enum: [Social, Sports, Travel, Community, Games,  Tech, Education, Business, Art, Dancing, Music, Political]
          example: "Social"
      required:
        - category

    EventListByCategoryResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    
    Predefined:
      type: object
      properties:
        predefinedId:
          type: integer
          example: 1
        parentId:
          type: integer
          example: 0
        entityType:
          type: string
          example: 'Category'
        name:
          type: string
          example: 'Technology'
        code:
          type: string
          example: 'TECH001'

    PredefinedListRequest:
      type: object
      properties:
        entityType:
          type: string
          enum: [EVENT-CATEGORY]
          example: "EVENT-CATEGORY"
      required:
        - entityType

    # Request Body for Creating Predefined
    CreatePredefinedRequest:
      type: object
      properties:
        parentId:
          type: integer
          example: 0
        entityType:
          type: string
          example: 'Category'
        name:
          type: string
          example: 'Technology'
        code:
          type: string
          example: 'TECH001'

    # Success Response for Predefined
    PredefinedResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          $ref: '#/components/schemas/Predefined'

    # Success Response for List of Predefined
    PredefinedListResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          type: array
          items:
            $ref: '#/components/schemas/Predefined'

    UpdateRsvpRequest:
      type: object
      properties:
        userId:
          type: integer
          example: 1
          description: The ID of the user
        eventId:
          type: integer
          example: 2
          description: The ID of the event
    # General Response Schema for RSVP status
    RsvpStatusResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: string
          example: '200'
        message:
          type: string
          example: RSVP status updated to attending.
    
    MyEventListRequest:
      type: object
      properties:
        userId:
          type: integer
          description: The ID of the user for whom to fetch RSVPed events.
          example: 123
        isUpcoming:
          type: boolean
          description: Flag to filter for upcoming events (e.g., `true` for upcoming events).
          default: false
          example: true
        isPast:
          type: boolean
          description: Flag to filter for past events (e.g., `true` for past events).
          default: false
          example: false
        isToday:
          type: boolean
          description: Flag to filter for today's events (e.g., `true` for today's events).
          default: false
          example: false
      required:
        - userId


paths:
  # User Paths
  /api/users/list:
    get:
      operationId: 'getAllUsers'
      summary: Get all users
      description: Retrieve a list of all users in the system
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          description: Error retrieving users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      operationId: 'getUserById'
      summary: Get user by ID
      description: Retrieve a user by their unique ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/save:
    post:
      operationId: 'createUser'
      summary: Create a new user
      description: Create a new user by providing user details
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Error creating user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/login:
    post:
      operationId: 'loginUser'
      summary: Login a user
      description: Login a user with email and password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in, returns access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Event Paths
  /api/event/list:
    get:
      operationId: 'getAllEvents'
      summary: Get all events
      description: Retrieve a list of all events
      tags:
        - Events
      parameters:
        - in: query
          name: isUpcoming
          required: false
          description: If set to "true", only upcoming events will be returned
          schema:
            type: string
            enum: [true, false]
            example: 'true'
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsListResponse'
        '400':
          description: Error retrieving events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/event/myEvent/list:
    post:
      operationId: 'getMyEvents'
      tags:
        - Events
      summary: Get a list of events a user has RSVPed to
      description: This endpoint returns a list of events that the user has RSVPed to, based on the isUpcoming, isPast, and isToday flags.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyEventListRequest'
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsListResponse'
        '400':
          description: Error retrieving events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/event/save:
    post:
      operationId: 'createEvent'
      summary: Create a new event
      description: Create a new event by providing event details
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Error creating event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/event/{id}:
    get:
      operationId: 'getEventById'
      summary: Get event by ID
      description: Retrieve an event by its unique ID
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the event
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: An event object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      operationId: 'updateEvent'
      summary: Update event by ID
      description: Update the event details for a given event ID
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the event to update
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Error updating event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      operationId: 'deleteEvent'
      summary: Delete event by ID
      description: Delete the event by its unique ID
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the event to delete
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        '400':
          description: Error deleting event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/event/list-by-category:
    post:
      operationId: 'getEventListByType'
      summary: Get list of event by category
      description: Retrieve a list of event category based on an optional filter for category
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventListByCategoryRequest'
      responses:
        '200':
          description: A list of event by category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListByCategoryResponse'
        '400':
          description: Error retrieving event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Predefined Paths
  /api/predefined/list-by-type:
    post:
      operationId: 'getPredefinedList'
      summary: Get list of predefined entities
      description: Retrieve a list of predefined entities based on an optional filter for entityType
      tags:
        - Predefined
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredefinedListRequest'
      responses:
        '200':
          description: A list of predefined entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredefinedListResponse'
        '400':
          description: Error retrieving predefined entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/predefined/{id}:
    get:
      operationId: 'getPredefinedById'
      summary: Get predefined entity by ID
      description: Retrieve a predefined entity by its unique ID
      tags:
        - Predefined
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the predefined entity
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A predefined entity object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredefinedResponse'
        '400':
          description: Predefined entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      operationId: 'updatePredefined'
      summary: Update predefined entity by ID
      description: Update the predefined entity details for a given ID
      tags:
        - Predefined
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the predefined entity to update
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePredefinedRequest'
      responses:
        '200':
          description: Predefined entity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredefinedResponse'
        '400':
          description: Error updating predefined entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      operationId: 'deletePredefined'
      summary: Delete predefined entity by ID
      description: Delete the predefined entity by its unique ID
      tags:
        - Predefined
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the predefined entity to delete
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Predefined entity deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredefinedResponse'
        '400':
          description: Error deleting predefined entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /api/predefined/save:
    post:
      operationId: 'createPredefined'
      summary: Create a new predefined entity
      description: Create a new predefined entity by providing details
      tags:
        - Predefined
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePredefinedRequest'
      responses:
        '201':
          description: Predefined entity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredefinedResponse'
        '400':
          description: Error creating predefined entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/rsvp/getMyRsvpStatus:
    post:
      summary: Get RSVP status for a user and event
      tags:
        - RSVP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRsvpRequest'
      responses:
        '200':
          description: Returns the RSVP status for the user and event
          content:
            application/json:
              schema:
                type: boolean
                example: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No RSVP record found for the user and event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/rsvp/updateRsvp:
    post:
      summary: Update the RSVP status for a user and event
      tags:
        - RSVP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRsvpRequest'
      responses:
        '200':
          description: Successfully updated RSVP status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RsvpStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'




  
