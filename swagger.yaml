openapi: 3.0.0
info:
  title: User API
  description: API for managing users
  version: 1.0.0
servers:
  - url:  http://192.168.68.145:3000
    description: Local server

components:
  schemas:
    # User Schema
    User:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        fullname:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        mobile:
          type: string
          example: '1234567890'
        password:
          type: string
          example: 'password123'
    
    # Request Body for Creating User
    CreateUserRequest:
      type: object
      properties:
        fullname:
          type: string
          example: 'John Doe'
        email:
          type: string
          example: 'john.doe@example.com'
        mobile:
          type: string
          example: '1234567890'
        password:
          type: string
          example: 'password123'

    # Request Body for Login
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: rohan@yopmail.com
        password:
          type: string
          example: 'admin@123'

    # Error Response Schema
    Error:
      type: object
      properties:
        status:
          type: string
          example: ERROR
        code:
          type: integer
          example: 400
        error:
          type: object
          properties:
            message:
              type: string
              example: 'Error message'

    # Success Response for User
    UserResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          $ref: '#/components/schemas/User'

    # Success Response for List of Users
    UsersListResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'

    # Login Response Model
    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        data:
          type: object
          properties:
            accessToken:
              type: string
              example: 'your-access-token-here'

paths:
  # Get All Users
  /api/users/list:
    get:
      operationId: 'getAllUsers'
      summary: Get all users
      description: Retrieve a list of all users in the system
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          description: Error retrieving users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Get User by ID
  /api/users/{id}:
    get:
      operationId: 'getUserById'
      summary: Get user by ID
      description: Retrieve a user by their unique ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Create User
  /api/users/save:
    post:
      operationId: 'createUser'
      summary: Create a new user
      description: Create a new user by providing user details
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Error creating user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User Login
  /api/users/login:
    post:
      operationId: 'loginUser'
      summary: Login a user
      description: Login a user with email and password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully logged in, returns access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
